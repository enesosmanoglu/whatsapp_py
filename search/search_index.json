{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"whatsapp_py <p>Send automated messages with the WhatsApp Web.</p> <p> </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install https://github.com/enesosmanoglu/whatsapp_py/archive/main.zip\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li> Send text messages</li> <li> Send files</li> <li> Send media</li> <li> Send messages at a specific time</li> <li> Send delayed messages</li> </ul>"},{"location":"#how-to-use","title":"How to use","text":"<p>See the documentation for more information.</p>"},{"location":"reference/browser/","title":"Browser Reference","text":""},{"location":"reference/browser/#browser","title":"Browser","text":"<p>Contains the information about a browser.</p> <p>Parameters:</p> Name Type Description Default <code>WebDriver</code> <code>WebDriver</code> <p>The WebDriver to be used.</p> <code>Chrome</code> <code>headless</code> <code>bool</code> <p>Whether to run the browser in headless mode.</p> <code>True</code> <code>user_data_dir</code> <code>str</code> <p>The path to the user data directory.</p> <code>None</code> <code>starting_url</code> <code>str</code> <p>The URL to be opened when the browser is started.</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Whether to run the browser in debug mode.</p> <code>False</code>"},{"location":"reference/browser/#browser.Browser-attributes","title":"Attributes","text":""},{"location":"reference/browser/#browser.browser.Browser.is_running","title":"is_running  <code>property</code>","text":"<pre><code>is_running: bool\n</code></pre>"},{"location":"reference/browser/#browser.browser.Browser.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre>"},{"location":"reference/browser/#browser.browser.Browser.current_url","title":"current_url  <code>property</code>","text":"<pre><code>current_url: str\n</code></pre>"},{"location":"reference/browser/#browser.Browser-functions","title":"Functions","text":""},{"location":"reference/browser/#browser.browser.Browser.set_network_conditions","title":"set_network_conditions","text":"<pre><code>set_network_conditions(offline=False, latency=5, throughput=500 * 1024, download_throughput=None, upload_throughput=None)\n</code></pre> <p>Sets the network conditions.</p> <p>Parameters:</p> Name Type Description Default <code>offline</code> <code>bool</code> <p>Whether the browser should be offline. Defaults to False.</p> <code>False</code> <code>latency</code> <code>int</code> <p>The latency in milliseconds. Defaults to 5.</p> <code>5</code> <code>throughput</code> <code>int</code> <p>The throughput in bytes per second. Defaults to 500 * 1024.</p> <code>500 * 1024</code> <code>download_throughput</code> <code>int</code> <p>The download throughput in bytes per second. Defaults to None.</p> <code>None</code> <code>upload_throughput</code> <code>int</code> <p>The upload throughput in bytes per second. Defaults to None.</p> <code>None</code> Info <p>The <code>throughput</code> parameter is a shorthand for setting both the download and upload throughput values.</p> <p>Returns:</p> Name Type Description <code>browser</code> <code>Browser</code> <p>The current browser instance.</p>"},{"location":"reference/browser/#browser.browser.Browser.start_screenshot_loop","title":"start_screenshot_loop","text":"<pre><code>start_screenshot_loop(interval=0.5)\n</code></pre> <p>Starts the screenshot loop.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>float</code> <p>The interval in seconds. Defaults to 0.5.</p> <code>0.5</code> <p>Returns:</p> Name Type Description <code>browser</code> <code>Browser</code> <p>The current browser instance.</p>"},{"location":"reference/browser/#browser.browser.Browser.stop_screenshot_loop","title":"stop_screenshot_loop","text":"<pre><code>stop_screenshot_loop()\n</code></pre> <p>Stops the screenshot loop.</p> <p>Returns:</p> Name Type Description <code>browser</code> <code>Browser</code> <p>The current browser instance.</p>"},{"location":"reference/browser/#browser.browser.Browser.screenshot","title":"screenshot","text":"<pre><code>screenshot(path=None)\n</code></pre> <p>Takes a screenshot.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the screenshot file. Defaults to <code>__screenshot_path</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the screenshot was taken successfully, False otherwise.</p>"},{"location":"reference/browser/#browser.browser.Browser.load_url","title":"load_url","text":"<pre><code>load_url(url)\n</code></pre> <p>Loads the specified URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to load.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the URL was loaded successfully, False otherwise.</p>"},{"location":"reference/browser/#browser.browser.Browser.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stops the browser.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the browser was stopped successfully, False otherwise.</p>"},{"location":"reference/browser/#browser.browser.Browser.wait_until","title":"wait_until","text":"<pre><code>wait_until(method, timeout=10)\n</code></pre> <p>Waits until the specified method returns a truthy value.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>Callable</code> <p>The method to wait for.</p> required <code>timeout</code> <code>int</code> <p>The timeout in seconds. Defaults to 10.</p> <code>10</code> <p>Returns:</p> Name Type Description <code>result</code> <code>Any</code> <p>The result of the method.</p> <p>Raises:</p> Type Description <code>TimeoutException</code> <p>If the method did not return a truthy value within the specified timeout.</p>"},{"location":"reference/browser/#browser.browser.Browser.wait_until_not","title":"wait_until_not","text":"<pre><code>wait_until_not(method, timeout=10)\n</code></pre> <p>Waits until the specified method returns a falsy value.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>Callable</code> <p>The method to wait for.</p> required <code>timeout</code> <code>int</code> <p>The timeout in seconds. Defaults to 10.</p> <code>10</code> <p>Returns:</p> Name Type Description <code>result</code> <code>Any</code> <p>The result of the method.</p> <p>Raises:</p> Type Description <code>TimeoutException</code> <p>If the method did not return a falsy value within the specified timeout.</p>"},{"location":"reference/browser/#browser.browser.Browser.find_element","title":"find_element","text":"<pre><code>find_element(css, parent=None)\n</code></pre> <p>Finds the first element matching the specified CSS selector.</p> <p>Parameters:</p> Name Type Description Default <code>css</code> <code>str</code> <p>The CSS selector.</p> required <code>parent</code> <code>WebElement | Chrome</code> <p>The parent element. Defaults to <code>_driver</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>element</code> <code>WebElement | None</code> <p>The element if found, None otherwise.</p>"},{"location":"reference/browser/#browser.browser.Browser.find_elements","title":"find_elements","text":"<pre><code>find_elements(css, parent=None)\n</code></pre> <p>Finds all elements matching the specified CSS selector.</p> <p>Parameters:</p> Name Type Description Default <code>css</code> <code>str</code> <p>The CSS selector.</p> required <code>parent</code> <code>WebElement | Chrome</code> <p>The parent element. Defaults to <code>_driver</code>.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>elements</code> <code>list[WebElement]</code> <p>The elements if found, an empty list otherwise.</p>"},{"location":"reference/browser/#browser.browser.Browser.has_element","title":"has_element","text":"<pre><code>has_element(css)\n</code></pre> <p>Checks if an element matching the specified CSS selector exists.</p> <p>Parameters:</p> Name Type Description Default <code>css</code> <code>str</code> <p>The CSS selector.</p> required <p>Returns:</p> Name Type Description <code>has_element</code> <code>bool</code> <p>True if an element matching the specified CSS selector exists, False otherwise.</p>"},{"location":"reference/browser/#browser.browser.Browser.execute_script","title":"execute_script","text":"<pre><code>execute_script(script, *args)\n</code></pre> <p>Executes the specified JavaScript code.</p> <p>Parameters:</p> Name Type Description Default <code>script</code> <code>str</code> <p>The JavaScript code.</p> required <code>args</code> <code>Any</code> <p>The arguments to pass to the JavaScript code.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>result</code> <code>Any</code> <p>The result of the JavaScript code.</p>"},{"location":"reference/chat/","title":"Chat Reference","text":""},{"location":"reference/chat/#chat-classes","title":"Classes","text":""},{"location":"reference/chat/#chat.Chat","title":"Chat","text":"<p>Represents a chat in WhatsApp Web</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client that owns this chat</p> required <code>phone_number</code> <code>str</code> <p>The phone number of the chat</p> required"},{"location":"reference/chat/#chat.Chat-attributes","title":"Attributes","text":""},{"location":"reference/chat/#chat.Chat.is_phone_number_invalid","title":"is_phone_number_invalid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_phone_number_invalid: bool = False\n</code></pre> <p>Whether the phone number is invalid or not</p>"},{"location":"reference/chat/#chat.Chat.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Client = client\n</code></pre> <p>The client that owns this chat</p>"},{"location":"reference/chat/#chat.Chat.phone_number","title":"phone_number  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phone_number: str = phone_number\n</code></pre> <p>The phone number of the chat</p>"},{"location":"reference/chat/#chat.Chat.is_open","title":"is_open  <code>property</code>","text":"<pre><code>is_open\n</code></pre> <p>Calls <code>Client.is_chat_open</code> with the chat's phone number</p> <p>Returns:</p> Name Type Description <code>is_open</code> <code>bool</code> <p>Whether the chat is open or not</p>"},{"location":"reference/chat/#chat.Chat-functions","title":"Functions","text":""},{"location":"reference/chat/#chat.Chat.debug_info","title":"debug_info","text":"<pre><code>debug_info(*args, **kwargs)\n</code></pre> <p>Calls <code>Client.debug_info</code> with the chat's name as prefix</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>The arguments to print</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to print</p> <code>{}</code>"},{"location":"reference/chat/#chat.Chat.debug_error","title":"debug_error","text":"<pre><code>debug_error(*args, **kwargs)\n</code></pre> <p>Calls <code>Client.debug_error</code> with the chat's name as prefix</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>The arguments to print</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to print</p> <code>{}</code>"},{"location":"reference/chat/#chat.Chat.open","title":"open","text":"<pre><code>open()\n</code></pre> <p>Calls <code>Client.load_chat_page</code> with the chat's instance</p> <ul> <li>Waits until chat page is loaded</li> </ul> <p>Returns:</p> Name Type Description <code>is_open</code> <code>bool</code> <p>Whether the chat is open or not</p>"},{"location":"reference/chat/#chat.Chat.send_message","title":"send_message","text":"<pre><code>send_message(content=None, file=None, media=None, delay=None, at_time=None, nonce=str(datetime.now().timestamp()))\n</code></pre> <p>Sends a message to the chat</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content of the message</p> <code>None</code> <code>file</code> <code>str</code> <p>The path to the file to send</p> <code>None</code> <code>media</code> <code>str</code> <p>The path to the media to send</p> <code>None</code> <code>delay</code> <code>timedelta</code> <p>The delay before sending the message</p> <code>None</code> <code>at_time</code> <code>datetime</code> <p>The time to send the message</p> <code>None</code> <code>nonce</code> <code>str</code> <p>The nonce of the message. </p> <code>str(datetime.now().timestamp())</code> <p>Info</p> <p><code>nonce</code> can be used to identify the message later (e.g. on <code>ClientEvent.TASK_COMPLETED</code>)</p> <p>Returns:</p> Name Type Description <code>message</code> <code>Message</code> <p>The message that was sent</p>"},{"location":"reference/check/","title":"Check Reference","text":""},{"location":"reference/check/#check-classes","title":"Classes","text":""},{"location":"reference/check/#check.Check","title":"Check","text":"<p>Contains all the check types that are used to check if the check is true or not.</p>"},{"location":"reference/check/#check.Check-attributes","title":"Attributes","text":""},{"location":"reference/check/#check.Check.WHATSAPP_URL","title":"WHATSAPP_URL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WHATSAPP_URL = 'whatsapp_url'\n</code></pre>"},{"location":"reference/check/#check.Check.WHATSAPP_READY","title":"WHATSAPP_READY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WHATSAPP_READY = 'whatsapp_ready'\n</code></pre>"},{"location":"reference/check/#check.Check.CONFIRM_POPUP","title":"CONFIRM_POPUP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP = 'confirm_popup'\n</code></pre>"},{"location":"reference/check/#check.Check.CONFIRM_POPUP_OK","title":"CONFIRM_POPUP_OK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP_OK = 'confirm_popup_ok'\n</code></pre>"},{"location":"reference/check/#check.Check.CONFIRM_POPUP_CANCEL","title":"CONFIRM_POPUP_CANCEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP_CANCEL = 'confirm_popup_cancel'\n</code></pre>"},{"location":"reference/check/#check.Check.CONFIRM_POPUP_BUTTON","title":"CONFIRM_POPUP_BUTTON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP_BUTTON = 'confirm_popup_button'\n</code></pre>"},{"location":"reference/check/#check.Check.LOADING_SCREEN","title":"LOADING_SCREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOADING_SCREEN = 'loading_screen'\n</code></pre>"},{"location":"reference/check/#check.Check.LOGIN_SCREEN","title":"LOGIN_SCREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOGIN_SCREEN = 'login_screen'\n</code></pre>"},{"location":"reference/check/#check.Check.QR_READY","title":"QR_READY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>QR_READY = 'qr_ready'\n</code></pre>"},{"location":"reference/check/#check.Check.QR_REFRESH","title":"QR_REFRESH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>QR_REFRESH = 'qr_refresh'\n</code></pre>"},{"location":"reference/check/#check.Check.LOGGED_IN","title":"LOGGED_IN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOGGED_IN = 'logged_in'\n</code></pre>"},{"location":"reference/check/#check.Check.MAIN_SCREEN","title":"MAIN_SCREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MAIN_SCREEN = 'main_screen'\n</code></pre>"},{"location":"reference/check/#check.Check.CHAT_SCREEN","title":"CHAT_SCREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHAT_SCREEN = 'chat_screen'\n</code></pre>"},{"location":"reference/check/#check.Check.true_once","title":"true_once  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>true_once: list[str] = []\n</code></pre>"},{"location":"reference/check/#check.Check.funcs","title":"funcs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>funcs: dict[str, Callable] = {}\n</code></pre>"},{"location":"reference/check/#check.Check-functions","title":"Functions","text":""},{"location":"reference/check/#check.Check.remove_first_check","title":"remove_first_check  <code>staticmethod</code>","text":"<pre><code>remove_first_check(name)\n</code></pre>"},{"location":"reference/client/","title":"Client Reference","text":""},{"location":"reference/client/#client-classes","title":"Classes","text":""},{"location":"reference/client/#client.Client","title":"Client","text":"<p>             Bases: <code>EventEmitter</code></p> <p>The main class of the library. It handles the browser and the events.</p> <p>Parameters:</p> Name Type Description Default <code>WebDriver</code> <code>Chrome | Edge | Firefox | Safari</code> <p>The webdriver to use for the browser.</p> <code>Chrome</code> <code>headless</code> <code>bool</code> <p>Whether to run the browser in headless mode or not</p> <code>True</code> <code>user_data_dir</code> <code>str</code> <p>The path to the user data directory</p> <code>'user_data'</code> <code>debug</code> <code>bool</code> <p>Whether to print debug messages or not</p> <code>False</code> <code>print_qr_code</code> <code>bool</code> <p>Whether to print the QR code to the console or not</p> <code>True</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If the webdriver is not supported</p>"},{"location":"reference/client/#client.Client-attributes","title":"Attributes","text":""},{"location":"reference/client/#client.Client.Chrome","title":"Chrome  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Chrome = WebDriver.Chrome\n</code></pre> <p>The Chrome webdriver</p>"},{"location":"reference/client/#client.Client.Edge","title":"Edge  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Edge = WebDriver.Edge\n</code></pre> <p>The Edge webdriver</p>"},{"location":"reference/client/#client.Client.Firefox","title":"Firefox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Firefox = WebDriver.Firefox\n</code></pre> <p>The Firefox webdriver</p>"},{"location":"reference/client/#client.Client.Safari","title":"Safari  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Safari = WebDriver.Safari\n</code></pre> <p>The Safari webdriver</p>"},{"location":"reference/client/#client.Client.browser","title":"browser  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>browser: Browser = None\n</code></pre> <p>The browser</p>"},{"location":"reference/client/#client.Client.task_manager","title":"task_manager  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>task_manager: TaskManager = TaskManager()\n</code></pre> <p>The manager of the tasks</p>"},{"location":"reference/client/#client.Client.qr_content","title":"qr_content  <code>property</code>","text":"<pre><code>qr_content: str\n</code></pre> <p>Fetches the qr code from the browser and returns it</p> <ul> <li>If the qr code is not ready, returns <code>None</code></li> <li>If the qr code is ready but not refreshed, refreshes and returns it</li> </ul> <p>Returns:</p> Name Type Description <code>qr_content</code> <code>str</code> <p>The content of the QR code</p>"},{"location":"reference/client/#client.Client.is_whatsapp_url","title":"is_whatsapp_url  <code>property</code>","text":"<pre><code>is_whatsapp_url: bool\n</code></pre> <p>Checks if the current url is the WhatsApp Web url</p> <p>Returns:</p> Name Type Description <code>is_whatsapp_url</code> <code>bool</code> <p>True if the current url is the WhatsApp Web url, False otherwise</p>"},{"location":"reference/client/#client.Client.is_whatsapp_ready","title":"is_whatsapp_ready  <code>property</code>","text":"<pre><code>is_whatsapp_ready: bool\n</code></pre> <p>Checks if the WhatsApp Web is ready</p> <p>Returns:</p> Name Type Description <code>is_whatsapp_ready</code> <code>bool</code> <p>True if the WhatsApp Web is ready, False otherwise</p>"},{"location":"reference/client/#client.Client.has_confirm_popup","title":"has_confirm_popup  <code>property</code>","text":"<pre><code>has_confirm_popup: bool\n</code></pre> <p>Checks if the confirm popup is visible</p> <ul> <li>Popups are shown while a chat is being loaded</li> </ul> <p>Returns:</p> Name Type Description <code>has_confirm_popup</code> <code>bool</code> <p>True if the confirm popup is visible, False otherwise</p>"},{"location":"reference/client/#client.Client.has_confirm_popup_ok","title":"has_confirm_popup_ok  <code>property</code>","text":"<pre><code>has_confirm_popup_ok: bool\n</code></pre> <p>Checks if the confirm popup has the OK button</p> <ul> <li>If the chat has invalid phone number, the confirm popup has the OK button</li> </ul> <p>Returns:</p> Name Type Description <code>has_confirm_popup_ok</code> <code>bool</code> <p>True if the confirm popup has the OK button, False otherwise</p>"},{"location":"reference/client/#client.Client.has_confirm_popup_cancel","title":"has_confirm_popup_cancel  <code>property</code>","text":"<pre><code>has_confirm_popup_cancel: bool\n</code></pre> <p>Checks if the confirm popup has the Cancel button</p> <ul> <li>While the chat is being loaded, the confirm popup has the Cancel button</li> </ul> <p>Returns:</p> Name Type Description <code>has_confirm_popup_cancel</code> <code>bool</code> <p>True if the confirm popup has the Cancel button, False otherwise</p>"},{"location":"reference/client/#client.Client.has_confirm_popup_button","title":"has_confirm_popup_button  <code>property</code>","text":"<pre><code>has_confirm_popup_button: bool\n</code></pre> <p>Checks if the confirm popup has any button</p> <p>Returns:</p> Name Type Description <code>has_confirm_popup_button</code> <code>bool</code> <p>True if the confirm popup has any button, False otherwise</p>"},{"location":"reference/client/#client.Client.is_loading_screen","title":"is_loading_screen  <code>property</code>","text":"<pre><code>is_loading_screen: bool\n</code></pre> <p>Checks if the loading screen is visible</p> <p>Returns:</p> Name Type Description <code>is_loading_screen</code> <code>bool</code> <p>True if the loading screen is visible, False otherwise</p>"},{"location":"reference/client/#client.Client.is_login_screen","title":"is_login_screen  <code>property</code>","text":"<pre><code>is_login_screen: bool\n</code></pre> <p>Checks if the login screen is visible</p> <p>Returns:</p> Name Type Description <code>is_login_screen</code> <code>bool</code> <p>True if the login screen is visible, False otherwise</p>"},{"location":"reference/client/#client.Client.is_qr_ready","title":"is_qr_ready  <code>property</code>","text":"<pre><code>is_qr_ready: bool\n</code></pre> <p>Checks if the QR code is ready</p> <ul> <li>QR code is ready when the login screen is visible and the QR code is visible</li> <li>It takes some time for the QR code to be ready after the login screen is visible</li> </ul> <p>Returns:</p> Name Type Description <code>is_qr_ready</code> <code>bool</code> <p>True if the QR code is ready, False otherwise</p>"},{"location":"reference/client/#client.Client.need_qr_refresh","title":"need_qr_refresh  <code>property</code>","text":"<pre><code>need_qr_refresh: bool\n</code></pre> <p>Checks if the QR code needs to be refreshed</p> <ul> <li>WhatsApp Web wants the QR code to be refreshed manually sometimes</li> <li>QR code needs to be refreshed when the QR refresh button is visible</li> </ul> <p>Returns:</p> Name Type Description <code>need_qr_refresh</code> <code>bool</code> <p>True if the QR code needs to be refreshed, False otherwise</p>"},{"location":"reference/client/#client.Client.is_logged_in","title":"is_logged_in  <code>property</code>","text":"<pre><code>is_logged_in: bool\n</code></pre> <p>Checks if the user is logged in</p> <ul> <li>User is logged in when the main screen or the chat screen is visible</li> <li>Middle drawer is visible in both the main screen and the chat screen</li> </ul> <p>Returns:</p> Name Type Description <code>is_logged_in</code> <code>bool</code> <p>True if the user is logged in, False otherwise</p>"},{"location":"reference/client/#client.Client.is_main_screen","title":"is_main_screen  <code>property</code>","text":"<pre><code>is_main_screen: bool\n</code></pre> <p>Checks if the main screen is visible</p> <ul> <li>Main screen is visible when the user is logged in and the intro title is visible</li> </ul> <p>Returns:</p> Name Type Description <code>is_main_screen</code> <code>bool</code> <p>True if the main screen is visible, False otherwise</p>"},{"location":"reference/client/#client.Client.is_chat_screen","title":"is_chat_screen  <code>property</code>","text":"<pre><code>is_chat_screen: bool\n</code></pre> <p>Checks if the chat screen is visible</p> <ul> <li>Chat screen is visible when the user is logged in and the conversation panel is visible</li> </ul> <p>Returns:</p> Name Type Description <code>is_chat_screen</code> <code>bool</code> <p>True if the chat screen is visible, False otherwise</p>"},{"location":"reference/client/#client.Client.loading_percent","title":"loading_percent  <code>property</code>","text":"<pre><code>loading_percent: float\n</code></pre> <p>Fetches the loading percent of the loading screen</p> <ul> <li>Returns <code>0.0</code> when the loading screen is not shown</li> </ul> <p>Returns:</p> Name Type Description <code>loading_percent</code> <code>float</code> <p>Loading percent of the loading screen</p>"},{"location":"reference/client/#client.Client.confirm_popup_content","title":"confirm_popup_content  <code>property</code>","text":"<pre><code>confirm_popup_content: str\n</code></pre> <p>Fetches the content of the confirm popup</p> <ul> <li>Returns empty string when the confirm popup is not shown</li> </ul> <p>Returns:</p> Name Type Description <code>confirm_popup_content</code> <code>str</code> <p>Content of the confirm popup</p>"},{"location":"reference/client/#client.Client.chat_title","title":"chat_title  <code>property</code>","text":"<pre><code>chat_title: str\n</code></pre> <p>Fetches the title of the chat</p> <ul> <li>Returns empty string when the chat screen is not shown</li> </ul> <p>Returns:</p> Name Type Description <code>chat_title</code> <code>str</code> <p>Title of the chat</p>"},{"location":"reference/client/#client.Client.is_chat_info_open","title":"is_chat_info_open  <code>property</code>","text":"<pre><code>is_chat_info_open: bool\n</code></pre> <p>Checks if the chat info drawer is open</p> <ul> <li>Returns <code>False</code> when the chat screen is not shown</li> </ul> <p>Returns:</p> Name Type Description <code>is_chat_info_open</code> <code>bool</code> <p>True if the chat info drawer is open, False otherwise</p>"},{"location":"reference/client/#client.Client.last_sent_message_data","title":"last_sent_message_data  <code>property</code>","text":"<pre><code>last_sent_message_data: str\n</code></pre> <p>Fetches the <code>data-testid</code> attribute of the last sent message * Returns empty string if there is no last sent message</p> <p>Returns:</p> Name Type Description <code>last_sent_message_data</code> <code>str</code> <p><code>data-testid</code> attribute of the last sent message</p>"},{"location":"reference/client/#client.Client-functions","title":"Functions","text":""},{"location":"reference/client/#client.Client.debug_info","title":"debug_info","text":"<pre><code>debug_info(*args, **kwargs)\n</code></pre> <p>Prints an info to the console if the debug is enabled</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>The arguments to print</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to print</p> <code>{}</code>"},{"location":"reference/client/#client.Client.debug_error","title":"debug_error","text":"<pre><code>debug_error(*args, **kwargs)\n</code></pre> <p>Emits the <code>ClientEvents.ERROR</code> event</p> <p>If the <code>__debug_enabled</code> is <code>True</code>:</p> <ul> <li>Prints an error message to the console</li> <li>Takes a screenshot of the browser window and saves it to the debug folder</li> </ul> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>The arguments to print</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments to print</p> <code>{}</code>"},{"location":"reference/client/#client.Client.is_true","title":"is_true","text":"<pre><code>is_true(type, first_time=False)\n</code></pre> <p>Checks if a condition is true</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>The type of the check function</p> required <code>first_time</code> <code>bool</code> <p>Whether to check if the condition is true for the first time or not. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>is_true</code> <code>bool</code> <p>Whether the condition is true or not</p>"},{"location":"reference/client/#client.Client.is_true_first_time","title":"is_true_first_time","text":"<pre><code>is_true_first_time(type)\n</code></pre> <p>Checks if a condition is true for the first time</p> <ul> <li>It is the same as calling <code>is_true(type, first_time=True)</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>The type of the check function</p> required <p>Returns:</p> Name Type Description <code>is_true_first_time</code> <code>bool</code> <p>Whether the condition is true or not</p>"},{"location":"reference/client/#client.Client.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Starts the client in a new thread (calls <code>__start</code>)</p>"},{"location":"reference/client/#client.Client.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stops the client</p>"},{"location":"reference/client/#client.Client.load_main_page","title":"load_main_page","text":"<pre><code>load_main_page()\n</code></pre> <p>Loads the WhatsApp Web main page</p>"},{"location":"reference/client/#client.Client.load_chat_page","title":"load_chat_page","text":"<pre><code>load_chat_page(chat)\n</code></pre> <p>Loads the chat page of the given chat</p> <p>Parameters:</p> Name Type Description Default <code>chat</code> <code>Chat</code> <p>The chat to load</p> required"},{"location":"reference/client/#client.Client.refresh_qr_code","title":"refresh_qr_code","text":"<pre><code>refresh_qr_code()\n</code></pre> <p>Refreshes the QR code if it is needed</p> <ul> <li>WhatsApp Web wants the QR code to be refreshed manually sometimes</li> </ul>"},{"location":"reference/client/#client.Client.get_message_from_data","title":"get_message_from_data","text":"<pre><code>get_message_from_data(data)\n</code></pre> <p>Fetches the message element from the <code>data-testid</code> attribute</p> <ul> <li>Returns <code>None</code> if the message element is not found</li> </ul> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p><code>data-testid</code> attribute of the message</p> required <p>Returns:</p> Name Type Description <code>web_element</code> <code>WebElement | None</code> <p>Message element if found, None otherwise</p>"},{"location":"reference/client/#client.Client.confirm_popup","title":"confirm_popup","text":"<pre><code>confirm_popup()\n</code></pre> <p>Confirms the confirm popup</p> <ul> <li>Does nothing if the confirm popup is not shown</li> </ul>"},{"location":"reference/client/#client.Client.wait_for_login","title":"wait_for_login","text":"<pre><code>wait_for_login()\n</code></pre> <p>Waits for the user to login</p> <ul> <li>Does nothing if the user is already logged in</li> <li>Removes the check for login screen when the user is logged in</li> </ul>"},{"location":"reference/client/#client.Client.is_chat_open","title":"is_chat_open","text":"<pre><code>is_chat_open(phone_number)\n</code></pre> <p>Checks if the chat is open for the given phone number</p> <p>Parameters:</p> Name Type Description Default <code>phone_number</code> <code>str</code> <p>Phone number of the chat</p> required <p>Returns:</p> Name Type Description <code>is_chat_open</code> <code>bool</code> <p>True if the chat is open, False otherwise</p>"},{"location":"reference/client/#client.Client.print_qr_code","title":"print_qr_code","text":"<pre><code>print_qr_code(invert=False, tty=False)\n</code></pre> <p>Prints the QR Code in the terminal</p> <p>Parameters:</p> Name Type Description Default <code>invert</code> <code>bool</code> <p>invert the ASCII characters (solid &lt;-&gt; transparent) Defaults to False.</p> <code>False</code> <code>tty</code> <code>bool</code> <p>use fixed TTY color codes (forces invert=True) Defaults to False.</p> <code>False</code>"},{"location":"reference/client/#client.Client.new_chat","title":"new_chat","text":"<pre><code>new_chat(phone_number)\n</code></pre> <p>Creates a new chat</p> <p>Parameters:</p> Name Type Description Default <code>phone_number</code> <code>str</code> <p>Phone number of the chat</p> required <p>Returns:</p> Name Type Description <code>chat</code> <code>Chat</code> <p>Chat object</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the phone number is invalid</p>"},{"location":"reference/client_events/","title":"Client Events","text":""},{"location":"reference/client_events/#client_events-classes","title":"Classes","text":""},{"location":"reference/client_events/#client_events.ClientEvents","title":"ClientEvents","text":"<p>Client events.</p>"},{"location":"reference/client_events/#client_events.ClientEvents-attributes","title":"Attributes","text":""},{"location":"reference/client_events/#client_events.ClientEvents.BROWSER_CREATED","title":"BROWSER_CREATED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BROWSER_CREATED = 'browser_created'\n</code></pre> <p>Fired when the browser is created.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.START","title":"START  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>START = 'start'\n</code></pre> <p>Fired when the client is started.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.UPDATE","title":"UPDATE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UPDATE = 'update'\n</code></pre> <p>Fired when the client is updated. Default interval is 0.5 seconds.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.STOP","title":"STOP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STOP = 'stop'\n</code></pre> <p>Fired when the client is stopped.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.ERROR","title":"ERROR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ERROR = 'error'\n</code></pre> <p>Fired when the client encounters an error.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.QR_CODE","title":"QR_CODE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>QR_CODE = 'qr_code'\n</code></pre> <p>Fired when a QR code is received. Also fired when the QR code is updated.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.LOGGED_IN","title":"LOGGED_IN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOGGED_IN = 'logged_in'\n</code></pre> <p>Fired when the client is logged in.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.LOGGED_OUT","title":"LOGGED_OUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOGGED_OUT = 'logged_out'\n</code></pre> <p>Fired when the client is logged out.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.TASK_STARTED","title":"TASK_STARTED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TASK_STARTED = 'task_started'\n</code></pre> <p>Fired when a task is started.</p>"},{"location":"reference/client_events/#client_events.ClientEvents.TASK_COMPLETED","title":"TASK_COMPLETED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TASK_COMPLETED = 'task_completed'\n</code></pre> <p>Fired when a task is completed.</p>"},{"location":"reference/constants/","title":"Const Reference","text":"<p>Constants for whatsapp_py.</p>"},{"location":"reference/constants/#const-attributes","title":"Attributes","text":""},{"location":"reference/constants/#const.MAX_LOOP_RETRIES","title":"MAX_LOOP_RETRIES  <code>module-attribute</code>","text":"<pre><code>MAX_LOOP_RETRIES = 20\n</code></pre>"},{"location":"reference/constants/#const.LOOP_INTERVAL","title":"LOOP_INTERVAL  <code>module-attribute</code>","text":"<pre><code>LOOP_INTERVAL = 0.5\n</code></pre>"},{"location":"reference/constants/#const.WHATSAPP_URL","title":"WHATSAPP_URL  <code>module-attribute</code>","text":"<pre><code>WHATSAPP_URL = 'https://web.whatsapp.com'\n</code></pre>"},{"location":"reference/constants/#const.WHATSAPP_PHONE_URL","title":"WHATSAPP_PHONE_URL  <code>module-attribute</code>","text":"<pre><code>WHATSAPP_PHONE_URL = f'{WHATSAPP_URL}/send?phone='\n</code></pre>"},{"location":"reference/css/","title":"CSS Reference","text":""},{"location":"reference/css/#css-classes","title":"Classes","text":""},{"location":"reference/css/#css.CSS","title":"CSS","text":"<p>Contains CSS Selectors for WhatsApp Web</p>"},{"location":"reference/css/#css.CSS-attributes","title":"Attributes","text":""},{"location":"reference/css/#css.CSS.APP","title":"APP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>APP = f'div#app'\n</code></pre>"},{"location":"reference/css/#css.CSS.CONFIRM_POPUP","title":"CONFIRM_POPUP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP = f'{APP} [data-testid=confirm-popup][role=dialog] div'\n</code></pre>"},{"location":"reference/css/#css.CSS.CONFIRM_POPUP_CONTENTS","title":"CONFIRM_POPUP_CONTENTS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP_CONTENTS = f'{CONFIRM_POPUP} [data-testid=popup-contents]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CONFIRM_POPUP_CANCEL","title":"CONFIRM_POPUP_CANCEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP_CANCEL = f'{CONFIRM_POPUP} [data-testid=popup-controls-cancel]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CONFIRM_POPUP_OK","title":"CONFIRM_POPUP_OK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONFIRM_POPUP_OK = f'{CONFIRM_POPUP} [data-testid=popup-controls-ok]'\n</code></pre>"},{"location":"reference/css/#css.CSS.LOADING_SCREEN","title":"LOADING_SCREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOADING_SCREEN = f'{APP} div[data-testid=wa-web-loading-screen]'\n</code></pre>"},{"location":"reference/css/#css.CSS.LOADING_PROGRESS","title":"LOADING_PROGRESS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LOADING_PROGRESS = f'{LOADING_SCREEN} progress'\n</code></pre>"},{"location":"reference/css/#css.CSS.LANDING_WINDOW","title":"LANDING_WINDOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LANDING_WINDOW = f'{APP} div.landing-window'\n</code></pre>"},{"location":"reference/css/#css.CSS.LINK_WITH_PHONE","title":"LINK_WITH_PHONE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LINK_WITH_PHONE = f'{LANDING_WINDOW} [data-testid=link-device-qrcode-alt-linking-hint]'\n</code></pre>"},{"location":"reference/css/#css.CSS.QR_CODE","title":"QR_CODE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>QR_CODE = f'{LANDING_WINDOW} [data-testid=qrcode]'\n</code></pre>"},{"location":"reference/css/#css.CSS.QR_REFRESH","title":"QR_REFRESH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>QR_REFRESH = f'{QR_CODE} [data-testid=refresh-large]'\n</code></pre>"},{"location":"reference/css/#css.CSS.MIDDLE_DRAWER","title":"MIDDLE_DRAWER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MIDDLE_DRAWER = f'{APP} [data-testid=drawer-middle]'\n</code></pre>"},{"location":"reference/css/#css.CSS.RIGHT_DRAWER","title":"RIGHT_DRAWER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIGHT_DRAWER = f'{APP} [data-testid=drawer-right]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CHAT_INFO_DRAWER","title":"CHAT_INFO_DRAWER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHAT_INFO_DRAWER = f'{RIGHT_DRAWER} [data-testid=chat-info-drawer]'\n</code></pre>"},{"location":"reference/css/#css.CSS.INTRO_TITLE","title":"INTRO_TITLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INTRO_TITLE = f'{APP} [data-testid=intro-title]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CONVERSATION_PANEL","title":"CONVERSATION_PANEL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONVERSATION_PANEL = f'{APP} [data-testid=conversation-panel-wrapper]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CHAT_INPUT","title":"CHAT_INPUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHAT_INPUT = f'{CONVERSATION_PANEL} div[data-testid=conversation-compose-box-input] p'\n</code></pre>"},{"location":"reference/css/#css.CSS.MEDIA_CAPTION","title":"MEDIA_CAPTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MEDIA_CAPTION = f'{APP} div[data-testid=media-caption-input-container] p'\n</code></pre>"},{"location":"reference/css/#css.CSS.CLIP_BUTTON","title":"CLIP_BUTTON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLIP_BUTTON = f'{CONVERSATION_PANEL} [data-testid=conversation-clip] [role=button]'\n</code></pre>"},{"location":"reference/css/#css.CSS.DOCUMENT_INPUT","title":"DOCUMENT_INPUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DOCUMENT_INPUT = f'{APP} [data-testid=mi-attach-document] input'\n</code></pre>"},{"location":"reference/css/#css.CSS.MEDIA_INPUT","title":"MEDIA_INPUT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MEDIA_INPUT = f'{APP} [data-testid=mi-attach-media] input'\n</code></pre>"},{"location":"reference/css/#css.CSS.SEND_BUTTON","title":"SEND_BUTTON  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEND_BUTTON = f'{APP} span[data-testid=send]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CONVERSATION_PANEL_MESSAGES","title":"CONVERSATION_PANEL_MESSAGES  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CONVERSATION_PANEL_MESSAGES = f'{CONVERSATION_PANEL} div[data-testid=conversation-panel-messages]'\n</code></pre>"},{"location":"reference/css/#css.CSS.LAST_MESSAGE_ROW","title":"LAST_MESSAGE_ROW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LAST_MESSAGE_ROW = f'{CONVERSATION_PANEL_MESSAGES} [role=application] [role=row]:last-child div'\n</code></pre>"},{"location":"reference/css/#css.CSS.LAST_MESSAGE_CONTENT","title":"LAST_MESSAGE_CONTENT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LAST_MESSAGE_CONTENT = f'{LAST_MESSAGE_ROW} {_CONTENT}'\n</code></pre>"},{"location":"reference/css/#css.CSS.LAST_MESSAGE_META","title":"LAST_MESSAGE_META  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LAST_MESSAGE_META = f'{LAST_MESSAGE_ROW} {_META}'\n</code></pre>"},{"location":"reference/css/#css.CSS.LAST_MESSAGE_TIME","title":"LAST_MESSAGE_TIME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LAST_MESSAGE_TIME = f'{LAST_MESSAGE_ROW} {_META_TIME}'\n</code></pre>"},{"location":"reference/css/#css.CSS.LAST_MESSAGE_STATUS","title":"LAST_MESSAGE_STATUS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LAST_MESSAGE_STATUS = f'{LAST_MESSAGE_ROW} {_META_STATUS}'\n</code></pre>"},{"location":"reference/css/#css.CSS.CHAT_TITLE","title":"CHAT_TITLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHAT_TITLE = f'{CONVERSATION_PANEL} [data-testid=conversation-info-header-chat-title]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CHAT_INFO_TITLE","title":"CHAT_INFO_TITLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHAT_INFO_TITLE = f'{CHAT_INFO_DRAWER} [data-testid=contact-info-subtitle]'\n</code></pre>"},{"location":"reference/css/#css.CSS.CHAT_INFO_SUBTITLE","title":"CHAT_INFO_SUBTITLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHAT_INFO_SUBTITLE = f'{CHAT_INFO_DRAWER} span&gt;span'\n</code></pre>"},{"location":"reference/css/#css.CSS.CHAT_INFO_CLOSE","title":"CHAT_INFO_CLOSE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CHAT_INFO_CLOSE = f'{CHAT_INFO_DRAWER} [data-testid=btn-closer-drawer]'\n</code></pre>"},{"location":"reference/css/#css.CSS-functions","title":"Functions","text":""},{"location":"reference/css/#css.CSS.concat","title":"concat  <code>staticmethod</code>","text":"<pre><code>concat(*args)\n</code></pre> <p>Concatenates the given arguments with a space in between.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>str</code> <p>The arguments to concatenate.</p> <code>()</code>"},{"location":"reference/event_emitter/","title":"EventEmitter Reference","text":""},{"location":"reference/event_emitter/#event_emitter-classes","title":"Classes","text":""},{"location":"reference/event_emitter/#event_emitter.EventEmitter","title":"EventEmitter","text":"<p>Emits events and calls the functions that are listening to them.</p> <p>Attributes:</p> Name Type Description <code>__listeners</code> <code>dict[str, list[Callable]]</code> <p>A dictionary that maps events to a list of functions that are listening to them.</p>"},{"location":"reference/event_emitter/#event_emitter.EventEmitter-functions","title":"Functions","text":""},{"location":"reference/event_emitter/#event_emitter.EventEmitter.on","title":"on  <code>staticmethod</code>","text":"<pre><code>on(event)\n</code></pre> <p>A decorator that adds a function to the list of functions that are listening to the event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The event that the function is listening to.</p> required <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>The function that is listening to the event.</p>"},{"location":"reference/event_emitter/#event_emitter.EventEmitter.emit","title":"emit  <code>staticmethod</code>","text":"<pre><code>emit(event, *args, **kwargs)\n</code></pre> <p>Calls all the functions that are listening to the event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The event that is emitted.</p> required <code>*args</code> <code>Any</code> <p>The arguments that are passed to the functions that are listening to the event.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments that are passed to the functions that are listening to the event.</p> <code>{}</code>"},{"location":"reference/event_emitter/#event_emitter.EventEmitter.remove","title":"remove  <code>staticmethod</code>","text":"<pre><code>remove(event, func)\n</code></pre> <p>Removes a function from the list of functions that are listening to the event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The event that the function is listening to.</p> required <code>func</code> <code>Callable</code> <p>The function that is listening to the event.</p> required"},{"location":"reference/event_emitter/#event_emitter.EventEmitter.clear","title":"clear  <code>staticmethod</code>","text":"<pre><code>clear(event)\n</code></pre> <p>Removes all the functions from the list of functions that are listening to the event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>The event that the functions are listening to.</p> required"},{"location":"reference/helpers/","title":"Helpers Reference","text":"<p>Helper functions for whatsapp_py.</p>"},{"location":"reference/helpers/#helpers-functions","title":"Functions","text":""},{"location":"reference/helpers/#helpers.retry_until_true","title":"retry_until_true","text":"<pre><code>retry_until_true(method)\n</code></pre> <p>Retries the method until it returns True or max retries is reached.</p> <p>Uses <code>time.sleep</code> to wait between retries.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>Callable[[], bool]</code> <p>The method to retry.</p> required <p>Returns:</p> Name Type Description <code>not_completed</code> <code>bool</code> <p>True if max retries is reached, False otherwise.</p>"},{"location":"reference/message/","title":"Message Reference","text":""},{"location":"reference/message/#message-classes","title":"Classes","text":""},{"location":"reference/message/#message.Message","title":"Message","text":"<p>Contains the information about a message.</p> <p>Attributes:</p> Name Type Description <code>chat</code> <code>Chat</code> <p>The chat that the message belongs to.</p> <code>id</code> <code>str</code> <p>The id of the message.</p> <code>content</code> <code>str</code> <p>The content of the message.</p> <code>file</code> <code>str</code> <p>The path to the file that the message contains.</p> <code>media</code> <code>str</code> <p>The path to the media that the message contains.</p> <code>time</code> <code>datetime</code> <p>The time that the message was sent.</p> <code>nonce</code> <code>str</code> <p>The nonce of the message.</p> <p>Info</p> <p><code>nonce</code> can be used to identify the message later (e.g. on <code>ClientEvent.TASK_COMPLETED</code>)</p>"},{"location":"reference/message/#message.Message-attributes","title":"Attributes","text":""},{"location":"reference/message/#message.Message.chat","title":"chat  <code>instance-attribute</code>","text":"<pre><code>chat = chat\n</code></pre>"},{"location":"reference/message/#message.Message.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id = id\n</code></pre>"},{"location":"reference/message/#message.Message.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content = content\n</code></pre>"},{"location":"reference/message/#message.Message.file","title":"file  <code>instance-attribute</code>","text":"<pre><code>file = file\n</code></pre>"},{"location":"reference/message/#message.Message.media","title":"media  <code>instance-attribute</code>","text":"<pre><code>media = media\n</code></pre>"},{"location":"reference/message/#message.Message.time","title":"time  <code>instance-attribute</code>","text":"<pre><code>time = time\n</code></pre>"},{"location":"reference/message/#message.Message.nonce","title":"nonce  <code>instance-attribute</code>","text":"<pre><code>nonce = nonce\n</code></pre>"},{"location":"reference/message/#message.Message.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element = None\n</code></pre>"},{"location":"reference/message/#message.Message.error","title":"error  <code>instance-attribute</code>","text":"<pre><code>error = None\n</code></pre>"},{"location":"reference/message/#message.Message.el_content","title":"el_content  <code>property</code>","text":"<pre><code>el_content\n</code></pre>"},{"location":"reference/message/#message.Message.el_meta","title":"el_meta  <code>property</code>","text":"<pre><code>el_meta\n</code></pre>"},{"location":"reference/message/#message.Message.el_time","title":"el_time  <code>property</code>","text":"<pre><code>el_time\n</code></pre>"},{"location":"reference/message/#message.Message.el_status","title":"el_status  <code>property</code>","text":"<pre><code>el_status\n</code></pre>"},{"location":"reference/message/#message.Message.is_sent","title":"is_sent  <code>property</code>","text":"<pre><code>is_sent: bool\n</code></pre>"},{"location":"reference/message/#message.Message.status_w","title":"status_w  <code>property</code>","text":"<pre><code>status_w: str\n</code></pre>"},{"location":"reference/message/#message.Message.status_w_index","title":"status_w_index  <code>property</code>","text":"<pre><code>status_w_index: int\n</code></pre>"},{"location":"reference/message/#message.Message.is_sending_w","title":"is_sending_w  <code>property</code>","text":"<pre><code>is_sending_w: bool\n</code></pre>"},{"location":"reference/message/#message.Message.is_delivered_w","title":"is_delivered_w  <code>property</code>","text":"<pre><code>is_delivered_w: bool\n</code></pre>"},{"location":"reference/message/#message.Message.is_read_w","title":"is_read_w  <code>property</code>","text":"<pre><code>is_read_w: bool\n</code></pre>"},{"location":"reference/message/#message.Message.content_w","title":"content_w  <code>property</code>","text":"<pre><code>content_w: str\n</code></pre>"},{"location":"reference/message/#message.Message.time_w","title":"time_w  <code>property</code>","text":"<pre><code>time_w: str\n</code></pre>"},{"location":"reference/message/#message.Message.time_w_datetime","title":"time_w_datetime  <code>property</code>","text":"<pre><code>time_w_datetime: datetime\n</code></pre>"},{"location":"reference/message/#message.Message-functions","title":"Functions","text":""},{"location":"reference/message/#message.Message.set_element","title":"set_element","text":"<pre><code>set_element(element)\n</code></pre> <p>Sets the element of the message.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>WebElement</code> <p>The element of the message.</p> required <p>Returns:</p> Name Type Description <code>message</code> <code>Message</code> <p>The message itself.</p>"},{"location":"reference/message/#message.Message.set_id","title":"set_id","text":"<pre><code>set_id(id)\n</code></pre> <p>Sets the id of the message.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The id of the message.</p> required <p>Returns:</p> Name Type Description <code>message</code> <code>Message</code> <p>The message itself.</p>"},{"location":"reference/message/#message.Message.set_time","title":"set_time","text":"<pre><code>set_time(time)\n</code></pre> <p>Sets the time of the message.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>datetime</code> <p>The time of the message.</p> required <p>Returns:</p> Name Type Description <code>message</code> <code>Message</code> <p>The message itself.</p>"},{"location":"reference/task/","title":"Task Reference","text":""},{"location":"reference/task/#task-classes","title":"Classes","text":""},{"location":"reference/task/#task.TaskType","title":"TaskType","text":"<p>Task types.</p>"},{"location":"reference/task/#task.TaskType-attributes","title":"Attributes","text":""},{"location":"reference/task/#task.TaskType.SEND_MESSAGE","title":"SEND_MESSAGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SEND_MESSAGE = 'send_message'\n</code></pre>"},{"location":"reference/task/#task.Task","title":"Task","text":"<p>Contains the information about a task.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client that the task belongs to.</p> required <code>type</code> <code>TaskType</code> <p>The type of the task.</p> required <code>priority</code> <code>int</code> <p>The priority of the task.</p> <code>0</code> <code>start_date</code> <code>datetime</code> <p>The time that the task was started.</p> <code>datetime.now()</code>"},{"location":"reference/task/#task.Task-attributes","title":"Attributes","text":""},{"location":"reference/task/#task.Task.client","title":"client  <code>instance-attribute</code>","text":"<pre><code>client = client\n</code></pre>"},{"location":"reference/task/#task.Task.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = type\n</code></pre>"},{"location":"reference/task/#task.Task.priority","title":"priority  <code>instance-attribute</code>","text":"<pre><code>priority = priority\n</code></pre>"},{"location":"reference/task/#task.Task.start_date","title":"start_date  <code>instance-attribute</code>","text":"<pre><code>start_date = start_date\n</code></pre>"},{"location":"reference/task/#task.Task.in_progress","title":"in_progress  <code>instance-attribute</code>","text":"<pre><code>in_progress = False\n</code></pre>"},{"location":"reference/task/#task.Task.is_done","title":"is_done  <code>instance-attribute</code>","text":"<pre><code>is_done = False\n</code></pre>"},{"location":"reference/task/#task.Task-functions","title":"Functions","text":""},{"location":"reference/task/#task.Task.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Starts the task.</p> <ul> <li>Emits <code>ClientEvents.TASK_STARTED</code> event.</li> </ul>"},{"location":"reference/task/#task.Task.done","title":"done","text":"<pre><code>done()\n</code></pre> <p>Marks the task as done.</p> <ul> <li>Emits <code>ClientEvents.TASK_COMPLETED</code> event.</li> </ul>"},{"location":"reference/task/#task.MessageTask","title":"MessageTask","text":"<p>             Bases: <code>Task</code></p> <p>Contains the information about a message task.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client that the task belongs to.</p> required <code>message</code> <code>Message</code> <p>The message to be sent.</p> required <code>priority</code> <code>int</code> <p>The priority of the task.</p> <code>0</code> <code>start_date</code> <code>datetime</code> <p>The time that the task was started.</p> <code>datetime.now()</code>"},{"location":"reference/task/#task.MessageTask-attributes","title":"Attributes","text":""},{"location":"reference/task/#task.MessageTask.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>"},{"location":"reference/task/#task.MessageTask-functions","title":"Functions","text":""},{"location":"reference/task/#task.MessageTask.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Starts the task.</p> <ul> <li>Emits <code>ClientEvents.TASK_STARTED</code> event.</li> <li>Sends the message. If an error occurs, the error is set to the message.</li> <li>Emits <code>ClientEvents.TASK_COMPLETED</code> event after the message is sent or an error occurs.</li> </ul>"},{"location":"reference/task/#task.TaskManager","title":"TaskManager","text":"<p>Manages the tasks.</p>"},{"location":"reference/task/#task.TaskManager-attributes","title":"Attributes","text":""},{"location":"reference/task/#task.TaskManager.tasks","title":"tasks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tasks: list[Task] = []\n</code></pre> <p>The list of tasks.</p>"},{"location":"reference/task/#task.TaskManager.current_task","title":"current_task  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>current_task: Task = None\n</code></pre> <p>The current task.</p>"},{"location":"reference/task/#task.TaskManager.active_tasks","title":"active_tasks  <code>property</code>","text":"<pre><code>active_tasks\n</code></pre> <p>Filters the tasks with <code>start_date</code> before now and <code>is_done</code> is <code>False</code> and sorts them by <code>start_date</code>.</p> <p>Returns:</p> Name Type Description <code>active_tasks</code> <code>list[Task]</code> <p>The list of active tasks.</p>"},{"location":"reference/task/#task.TaskManager-functions","title":"Functions","text":""},{"location":"reference/task/#task.TaskManager.add_task","title":"add_task","text":"<pre><code>add_task(task)\n</code></pre> <p>Adds a task to the list of tasks.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>Task</code> <p>The task to be added.</p> required <p>Returns:</p> Name Type Description <code>task_manager</code> <code>TaskManager</code> <p>The task manager instance.</p>"},{"location":"reference/task/#task.TaskManager.remove_task","title":"remove_task","text":"<pre><code>remove_task(task)\n</code></pre> <p>Removes a task from the list of tasks.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>Task</code> <p>The task to be removed.</p> required <p>Returns:</p> Name Type Description <code>task_manager</code> <code>TaskManager</code> <p>The task manager instance.</p>"},{"location":"reference/task/#task.TaskManager.get_task","title":"get_task","text":"<pre><code>get_task()\n</code></pre> <p>Gets the next task to be executed.</p> <ul> <li>If the current task is not done, it returns the current task.</li> <li>If the current task is done, it removes the current task from the list of tasks and returns the next task.</li> </ul> <p>Returns:</p> Name Type Description <code>task</code> <code>Task</code> <p>The next task to be executed.</p>"},{"location":"reference/database/column/","title":"Database Reference","text":""},{"location":"reference/database/column/#column","title":"Column","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Contains the information about a column in a table.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the column.</p> <code>type</code> <code>Any</code> <p>The type of the column.</p> <code>nullable</code> <code>bool</code> <p>Whether or not the column can be null.</p>"},{"location":"reference/database/column/#db.column.Column-attributes","title":"Attributes","text":""},{"location":"reference/database/column/#db.column.Column.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/database/column/#db.column.Column.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Any\n</code></pre>"},{"location":"reference/database/column/#db.column.Column.nullable","title":"nullable  <code>instance-attribute</code>","text":"<pre><code>nullable: bool\n</code></pre>"},{"location":"reference/database/connection_config/","title":"Database Reference","text":""},{"location":"reference/database/connection_config/#connection-config","title":"Connection Config","text":"<p>             Bases: <code>NamedTuple</code></p> <p>See pyodbc wiki for more information.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig-attributes","title":"Attributes","text":""},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.Driver","title":"Driver  <code>instance-attribute</code>","text":"<pre><code>Driver: str\n</code></pre> <p>The name of the driver to be used to connect to the database. This is optional and if not specified, the connection will be made using the default SQL Server driver.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.Server","title":"Server  <code>instance-attribute</code>","text":"<pre><code>Server: str\n</code></pre> <p>The name of the server to which a connection is established.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.Database","title":"Database  <code>instance-attribute</code>","text":"<pre><code>Database: str\n</code></pre> <p>The name of the database on the server.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.Trusted_Connection","title":"Trusted_Connection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Trusted_Connection: bool = None\n</code></pre> <p>If yes, the connection will be established using Windows Authentication. If no, the connection will be established using SQL Server Authentication and the user name and password specified.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.UID","title":"UID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>UID: str = None\n</code></pre> <p>The user name used to authenticate.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.PWD","title":"PWD  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PWD: str = None\n</code></pre> <p>The password for the user name.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.Encrypt","title":"Encrypt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Encrypt: bool = None\n</code></pre> <p>If yes, the connection will be encrypted. If no, the connection will not be encrypted.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.LongAsMax","title":"LongAsMax  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LongAsMax: bool = None\n</code></pre> <p>If yes, the SQL_LONGVARCHAR and SQL_LONGVARBINARY data types will be treated as SQL_VARCHAR and SQL_VARBINARY. If no, the SQL_LONGVARCHAR and SQL_LONGVARBINARY data types will be treated as SQL_LONGVARCHAR and SQL_LONGVARBINARY.</p>"},{"location":"reference/database/connection_config/#db.connection_config.ConnectionConfig.APP","title":"APP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>APP: str = None\n</code></pre> <p>The name of the application associated with the connection.</p>"},{"location":"reference/database/sql/","title":"Database Reference","text":""},{"location":"reference/database/sql/#sql","title":"SQL","text":"<p>A class that represents a connection to a SQL Server database. </p> Info <p>Connects to the database during initialization and closes the connection during destruction.</p> <ul> <li>Uses pyodbc module to connect to the database.</li> <li>Uses ConnectionConfig to configure the connection.</li> <li>Uses SqlResult to represent the result of a SQL query.</li> <li>Uses Column to represent a column in a table.</li> <li>Uses Row (from pyodbc) to represent a row in a table.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>connection_config</code> <code>ConnectionConfig</code> <p>The configuration of the connection.</p> required <code>autocommit</code> <code>bool</code> <p>Whether or not to automatically commit changes. Defaults to False.</p> <code>False</code> <code>debug</code> <code>bool</code> <p>Whether or not to print debug information. Defaults to False.</p> <code>False</code>"},{"location":"reference/database/sql/#db.SQL-attributes","title":"Attributes","text":""},{"location":"reference/database/sql/#db.sql.SQL.debug","title":"debug  <code>instance-attribute</code>","text":"<pre><code>debug: bool = debug\n</code></pre> <p>Whether or not to print debug information.</p>"},{"location":"reference/database/sql/#db.SQL-functions","title":"Functions","text":""},{"location":"reference/database/sql/#db.sql.SQL.execute","title":"execute","text":"<pre><code>execute(sql, *params)\n</code></pre> <p>Executes a SQL query.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to execute.</p> required <code>*params</code> <code>Any</code> <p>The parameters to replace the question marks in the SQL query with.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>SqlResult</code> <code>SqlResult</code> <p>The result of the SQL query.</p>"},{"location":"reference/database/sql/#db.sql.SQL.commit","title":"commit","text":"<pre><code>commit()\n</code></pre> <p>Commit all SQL statements executed on the connection since the last commit/rollback.</p> If you don't enable <code>autocommit</code>: <p>Make sure to call this method after making changes to the database. Otherwise, the changes will not be saved.</p> <p>Returns:</p> Name Type Description <code>sql</code> <code>SQL</code> <p>The current SQL instance.</p>"},{"location":"reference/database/sql/#db.sql.SQL.rollback","title":"rollback","text":"<pre><code>rollback()\n</code></pre> <p>Rollback all SQL statements executed on the connection since the last commit/rollback.</p> <p>Returns:</p> Name Type Description <code>sql</code> <code>SQL</code> <p>The current SQL instance.</p>"},{"location":"reference/database/sql/#db.sql.SQL.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection.  Any uncommitted SQL statements will be rolled back.</p> <p>Returns:</p> Name Type Description <code>sql</code> <code>SQL</code> <p>The current SQL instance.</p>"},{"location":"reference/database/sql_result/","title":"Database Reference","text":""},{"location":"reference/database/sql_result/#sql-result","title":"SQL Result","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Contains the information about a SQL query result.</p> <p>Attributes:</p> Name Type Description <code>rows</code> <code>list[Row]</code> <p>The rows of the result.</p> <code>rows_dict</code> <code>list[dict[str, Any]]</code> <p>The rows of the result as a list of dictionaries.</p> <code>affected_rows</code> <code>int</code> <p>The number of rows affected by the query.</p> <code>messages</code> <code>list[str]</code> <p>The messages returned by the query.</p> <code>columns</code> <code>dict[str, Column]</code> <p>The columns of the result.</p>"},{"location":"reference/database/sql_result/#db.sql_result.SqlResult-attributes","title":"Attributes","text":""},{"location":"reference/database/sql_result/#db.sql_result.SqlResult.rows","title":"rows  <code>instance-attribute</code>","text":"<pre><code>rows: list[Row]\n</code></pre>"},{"location":"reference/database/sql_result/#db.sql_result.SqlResult.rows_dict","title":"rows_dict  <code>instance-attribute</code>","text":"<pre><code>rows_dict: list[dict[str, Any]]\n</code></pre>"},{"location":"reference/database/sql_result/#db.sql_result.SqlResult.affected_rows","title":"affected_rows  <code>instance-attribute</code>","text":"<pre><code>affected_rows: int\n</code></pre>"},{"location":"reference/database/sql_result/#db.sql_result.SqlResult.messages","title":"messages  <code>instance-attribute</code>","text":"<pre><code>messages: list[str]\n</code></pre>"},{"location":"reference/database/sql_result/#db.sql_result.SqlResult.columns","title":"columns  <code>instance-attribute</code>","text":"<pre><code>columns: dict[str, Column]\n</code></pre>"},{"location":"usage/basic/","title":"Basic Usage","text":""},{"location":"usage/basic/#import-class","title":"Import class","text":"<pre><code>from whatsapp_py import Client\n</code></pre>"},{"location":"usage/basic/#create-client","title":"Create client","text":"<p>See Client() for more information.</p> <p>Info</p> <p>Creating client will automatically start the browser, open WhatsApp Web, and wait for QR code scan.</p> Default OptionsCustom Options <pre><code>client = Client()\n</code></pre> <pre><code>client = Client(\n    print_qr_code=False, # default: True\n    WebDriver=Client.Edge, # default: Client.Chrome\n    user_data_dir='my_user_data', # default: 'user_data'\n    headless=False, # default: True\n    debug=True, # default: False\n)\n</code></pre> <p>Info</p> <p>Session data will be saved in <code>user_data_dir</code> folder in the current directory.</p> <p>So, you don't need to scan QR code again next time you run the script.</p>"},{"location":"usage/basic/#create-chat","title":"Create chat","text":"<pre><code>chat = client.new_chat('{phone_number}')\n</code></pre> <p>Danger</p> <p>For the phone number, you must use any of the following formats:</p> <ul> <li>+1234567890 <code>(country code is required)</code></li> <li>1234567890 <code>(without plus sign)</code></li> <li>+1 234 567 890 <code>(spaces are ignored)</code></li> </ul>"},{"location":"usage/basic/#send-message","title":"Send message","text":"<p>See Chat.send_message() for more information.</p>"},{"location":"usage/basic/#send-text-message","title":"Send text message","text":"<pre><code>chat.send_message('This is text message')\n</code></pre>"},{"location":"usage/basic/#send-media-message-image-video-etc","title":"Send media message (image, video, etc.)","text":"with captionwithout caption <pre><code>chat.send_message('This is caption', media='{path_to_media}')\n</code></pre> <pre><code>chat.send_message(media='{path_to_media}')\n</code></pre>"},{"location":"usage/basic/#send-file-message-document-etc","title":"Send file message (document, etc.)","text":"with captionwithout caption <pre><code>chat.send_message('This is caption', file='{path_to_file}')\n</code></pre> <pre><code>chat.send_message(file='{path_to_file}')\n</code></pre> <p>Info</p> <p>You can give <code>relative path</code> or <code>absolute path</code> to the file and media.</p> <p>Warning</p> <p>You can't set <code>file</code> and <code>media</code> at the same time.</p> <pre><code>chat.send_message(file='{path_to_file}', media='{path_to_media}')\n</code></pre>"},{"location":"usage/basic/#send-scheduled-message","title":"Send scheduled message","text":"<pre><code>from datetime import datetime, timedelta\n</code></pre>"},{"location":"usage/basic/#send-delayed-message","title":"Send delayed message","text":"<p><pre><code>delay = timedelta(seconds=10)\n</code></pre> <pre><code>chat.send_message('This is text message', delay=delay)\n</code></pre></p>"},{"location":"usage/basic/#send-message-at-specific-time","title":"Send message at specific time","text":"<p><pre><code>at_time = datetime(2023, 07, 20, 16, 54)\n</code></pre> <pre><code>chat.send_message('This is text message', at_time=at_time)\n</code></pre></p> <p>Tip</p> <p>You can use <code>delay</code> and <code>at_time</code> at the same time.</p> <pre><code>chat.send_message('This is text message', delay=delay, at_time=at_time)\n</code></pre>"},{"location":"usage/events/","title":"Using with events","text":""},{"location":"usage/events/#import-classes","title":"Import classes","text":"<pre><code>from whatsapp_py import Client, ClientEvents\n</code></pre>"},{"location":"usage/events/#create-client","title":"Create client","text":"<p>See Basic Usage for more details. <pre><code>client = Client()\n</code></pre></p>"},{"location":"usage/events/#register-event-handlers","title":"Register event handlers","text":"<p>Decorate functions with <code>@client.on('event_name')</code> to register event handlers.</p> <p>Function name does not matter.</p> <p>For the <code>'event_name'</code>, use the <code>ClientEvents</code> class.</p> <p>Example</p> <pre><code>@client.on( ClientEvents.START )\ndef on_start():\n    print(\"&gt;&gt; Client started\")\n</code></pre> <p>For the list of available events, see All Client Events below.</p>"},{"location":"usage/events/#client-events","title":"Client Events","text":""},{"location":"usage/events/#summary","title":"Summary","text":"<p>Tip</p> <p>Click on the event name to jump to the details.</p> Event Name Parameters Description BROWSER_CREATED <code>Browser</code> Browser instance created before starting client START - Client started after browser initialized UPDATE - Fired every <code>LOOP_INTERVAL</code> seconds after client started STOP - Client stopped on exit ERROR <code>Exception</code> Client error occurred QR_CODE <code>str</code> QR code received LOGGED_IN - Client logged in LOGGED_OUT - Client logged out TASK_STARTED <code>MessageTask</code> Task started TASK_COMPLETED <code>MessageTask</code> Task completed"},{"location":"usage/events/#details","title":"Details","text":""},{"location":"usage/events/#browser-created-event","title":"Browser Created Event","text":"<ul> <li> <p>Fired when browser instance is created.</p> </li> <li> <p>Can be used to set browser network conditions.</p> </li> </ul> <pre><code>@client.on(ClientEvents.BROWSER_CREATED)\ndef on_browser_created(browser):\n    print(\"&gt;&gt; Browser created\", browser)\n\n    # Set network conditions\n    browser.set_network_conditions(\n        offline = False,\n        latency = 0,\n        download_throughput = 10 * 1024,\n        upload_throughput = 10 * 1024\n    )\n</code></pre>"},{"location":"usage/events/#start-event","title":"Start Event","text":"<ul> <li>Fired after browser is initialized.</li> </ul> <pre><code>@client.on(ClientEvents.START)\ndef on_start():\n    print(\"&gt;&gt; Client started\")\n</code></pre>"},{"location":"usage/events/#update-event","title":"Update Event","text":"<ul> <li>Fired every <code>LOOP_INTERVAL</code> seconds.</li> <li>Fired after client is started successfully.</li> <li>Can be used to do periodic tasks while client is running.</li> <li>Can be used with SQL Database to check for new datas periodically. </li> </ul> <pre><code>@client.on(ClientEvents.UPDATE)\ndef on_update():\n    # print(\"&gt;&gt; Client update\") # No need to print this every second :)\n\n    # Do something periodically\n    pass\n</code></pre>"},{"location":"usage/events/#stop-event","title":"Stop Event","text":"<ul> <li>Fired when client is stopped.</li> </ul> <pre><code>@client.on(ClientEvents.STOP)\ndef on_stop():\n    print(\"&gt;&gt; Client stopped\")\n</code></pre>"},{"location":"usage/events/#error-event","title":"Error Event","text":"<ul> <li>Fired when client encounters an error.</li> </ul> <pre><code>@client.on(ClientEvents.ERROR)\ndef on_error(error: Exception):\n    print(\"&gt;&gt; Client error\", error)\n</code></pre>"},{"location":"usage/events/#qr-code-event","title":"QR Code Event","text":"<ul> <li>Fired when QR code is received.</li> <li>Fired when QR code is refreshed.</li> </ul> <pre><code>@client.on(ClientEvents.QR_CODE)\ndef on_qr_code(qr_code: str):\n    print(\"&gt;&gt; Client QR code\", qr_code)\n</code></pre>"},{"location":"usage/events/#logged-in-event","title":"Logged In Event","text":"<ul> <li>Fired when main page is loaded after scanning QR code. </li> <li>Can be used to send messages after client is logged in.</li> </ul> <p>\u2022 Fired after client is started if QR scanned in one of the previous sessions</p> <pre><code>@client.on(ClientEvents.LOGGED_IN)\ndef on_logged_in():\n    print(\"&gt;&gt; Client logged in\")\n\n    # Send message\n    chat = client.new_chat(\"{phone_number}\")\n    chat.send_message(\"Hello world\")\n</code></pre>"},{"location":"usage/events/#logged-out-event","title":"Logged Out Event","text":"<ul> <li>Fired when client is logged out.</li> </ul> <pre><code>@client.on(ClientEvents.LOGGED_OUT)\ndef on_logged_out():\n    print(\"&gt;&gt; Client logged out\")\n</code></pre>"},{"location":"usage/events/#task-started-event","title":"Task Started Event","text":"<ul> <li>Fired when a task is started.</li> <li>See Task for more details.</li> </ul> <pre><code>@client.on(ClientEvents.TASK_STARTED)\ndef on_task_started(message_task):\n    print(\"&gt;&gt; Client task started\", message_task)\n</code></pre>"},{"location":"usage/events/#task-completed-event","title":"Task Completed Event","text":"<ul> <li>Fired when a task is completed.</li> <li>See Task for more details.</li> </ul> <pre><code>@client.on(ClientEvents.TASK_COMPLETED)\ndef on_task_completed(message_task):\n    print(\"&gt;&gt; Client task completed\", message_task)\n</code></pre>"},{"location":"usage/sql/","title":"Using with SQL Database","text":"<p>In this example, we will create a client that will send messages from a SQL database. </p> <ul> <li>The client will send messages from rows that are not completed yet. </li> <li>After the message is sent, the client will update the row with the message id. </li> <li>If the message failed to send, the client will update the row with the error message. </li> </ul>"},{"location":"usage/sql/#database-schema","title":"Database Schema","text":"<p>In this example database, we have 3 tables: <code>Tasks</code>, <code>Messages</code>, and <code>Statuses</code>.</p> <ul> <li><code>Tasks</code> table contains the messages that will be sent.</li> <li><code>Messages</code> table contains the messages that have been sent.</li> <li><code>Statuses</code> table contains the statuses of the messages that have been sent.</li> </ul> <p>Create a database named <code>DbWhatsApp</code> and run the following scripts to create the tables.</p>"},{"location":"usage/sql/#tasks","title":"Tasks","text":"<pre><code>CREATE TABLE Tasks (\nid INT IDENTITY(1,1) PRIMARY KEY,\nphone_number VARCHAR(20) NOT NULL,\ntext_content VARCHAR(1000) NOT NULL,\nfile_path VARCHAR(1000) NULL,\nmedia_path VARCHAR(1000) NULL,\nstart_at DATETIME NULL,\nmsg_id VARCHAR(100) NULL,\nerror VARCHAR(1000) NULL\n)\n</code></pre> Column Type Nullable Description <code>id</code> <code>INT</code> <code>false</code> The id of the task. <code>phone_number</code> <code>VARCHAR(20)</code> <code>false</code> The phone number of the recipient. <code>text_content</code> <code>VARCHAR(1000)</code> <code>false</code> The text content of the message. <code>file_path</code> <code>VARCHAR(1000)</code> <code>true</code> The file path of the file to be sent. <code>media_path</code> <code>VARCHAR(1000)</code> <code>true</code> The media path of the media to be sent. <code>start_at</code> <code>DATETIME</code> <code>true</code> The time when the message will be sent. <code>msg_id</code> <code>VARCHAR(100)</code> <code>true</code> The id of the message. <code>error</code> <code>VARCHAR(1000)</code> <code>true</code> The error message if the message failed to send."},{"location":"usage/sql/#messages","title":"Messages","text":"<pre><code>CREATE TABLE Messages (\nid VARCHAR(100) PRIMARY KEY,\nsent_at DATETIME NOT NULL,\nstatus_id INT NOT NULL\n)\n</code></pre> Column Type Nullable Description <code>id</code> <code>VARCHAR(100)</code> <code>false</code> The id of the message. <code>sent_at</code> <code>DATETIME</code> <code>false</code> The time when the message was sent. <code>status_id</code> <code>INT</code> <code>false</code> The id of the status."},{"location":"usage/sql/#statuses","title":"Statuses","text":"<pre><code>CREATE TABLE Statuses (\nid INT IDENTITY(1,1) PRIMARY KEY,\nname VARCHAR(100) NOT NULL\ndescription VARCHAR(1000) NULL\n)\n\nINSERT INTO Statuses (name, description) VALUES\n('msg-time', 'Sending'),\n('msg-check', 'Delivered'),\n('msg-dblcheck', 'Read')\n</code></pre> Column Type Nullable Description <code>id</code> <code>INT</code> <code>false</code> The id of the status. <code>name</code> <code>VARCHAR(100)</code> <code>false</code> The name of the status. <code>description</code> <code>VARCHAR(1000)</code> <code>true</code> The description of the status."},{"location":"usage/sql/#how-it-works","title":"How it works","text":"<ul> <li>The client will get all rows from <code>Tasks</code> table that are not completed yet.</li> <li>The client will iterate through the rows.</li> <li>The client will create a chat with the recipient's phone number.</li> <li>The client will send the message.</li> <li>If the message is sent successfully, the client will update the row with the message id.</li> <li>If the message failed to send, the client will update the row with the error message.</li> <li>The client will repeat the process every time the <code>UPDATE</code> event is emitted.</li> </ul>"},{"location":"usage/sql/#import-classes","title":"Import classes","text":"<p><pre><code>from whatsapp_py import Client, ClientEvents\n</code></pre> <pre><code>from whatsapp_py import SQL, ConnectionConfig\n</code></pre> <pre><code>from whatsapp_py import MessageTask, SqlResult # for type hinting\n</code></pre></p>"},{"location":"usage/sql/#create-client","title":"Create client","text":"<p>See Basic Usage for more details. <pre><code>client = Client()\n</code></pre></p>"},{"location":"usage/sql/#create-sql-instance","title":"Create SQL instance","text":"<p>See SQL Reference for more details. <pre><code>sql = SQL (\n    ConnectionConfig (\n        Driver = \"{ODBC Driver 17 for SQL Server}\",\n        Server = \"localhost\",\n        Database = \"DbWhatsApp\",\n        Trusted_Connection = True,\n        Encrypt = False,\n        LongAsMax = True,\n        APP = \"whatsapp_py module test\",\n    ),\n    autocommit = True,\n)\n</code></pre></p>"},{"location":"usage/sql/#register-event-handlers","title":"Register event handlers","text":"<p>See Using with events for more details. <pre><code># Save rows that are in progress to prevent duplicate tasks\nprogressing_rows = {}\n</code></pre> <pre><code>@client.on(ClientEvent.UPDATE)\ndef on_update():\n    # Get all rows that are not completed\n    result = sql.execute(\"\"\"\n        SELECT * FROM Tasks\n        WHERE msg_id IS NULL AND error IS NULL\n    \"\"\")\n\n    # Iterate through rows\n    for row in result.rows_dict:\n\n        id = row['id']\n\n        # Skip if already in progress\n        if id in progressing_rows:\n            continue\n\n        # Add to progressing rows\n        progressing_rows[id] = row\n\n        # Get datas from row\n        phone_number = row['phone_number']\n        text_content = row['text_content']\n        file_path = row['file_path']\n        media_path = row['media_path']\n        start_at = row['start_at']\n\n        try:\n            # Create chat\n            chat = client.new_chat(phone_number)\n\n            # Send message with task id as nonce\n            chat.send_message(\n                nonce = id, \n                content = text_content, \n                file = file_path,\n                media = media_path,\n                at_time = start_at,\n            )\n\n        except Exception as e:\n            print(f\"&gt;&gt; Client Error:\", e)\n\n            # Update row with error message\n            sql.execute(\"\"\"\n                UPDATE Tasks\n                SET\n                    error = ?\n                WHERE id = ?\n            \"\"\", str(e), id)\n\n        else:\n            print(f\"&gt;&gt; SQL message {id} added to task queue\")\n</code></pre> <pre><code>@client.on(ClientEvent.TASK_COMPLETED)\ndef on_task_completed(task: MessageTask):\n    # Skip if not in progressing rows\n    if task.message.nonce not in progressing_rows:\n        return\n\n    print(\"&gt;&gt; Client task completed\", task)\n\n    # Create variables to store sql results\n    res: SqlResult = None\n    res2: SqlResult = None\n\n    try:\n        # Check if task has error\n        if task.message.error is not None:\n            print(f\"&gt;&gt; Message Error:\", task.message.error)\n\n            # Update row with error message\n            res = sql.execute(\n\"\"\"\n                    UPDATE Tasks\n                    SET\n                        error = ?\n                    WHERE id = ?\n                \"\"\", \n                task.message.error, \n                task.message.nonce\n            )\n        else:\n            # Insert message to database\n            res = sql.execute(\n\"\"\"\n                    INSERT INTO Messages (id, sent_at, status_id)\n                    VALUES (?, ?, ?)\n                \"\"\", \n                task.message.id, \n                task.message.time, \n                task.message.status_w_index + 1\n            )\n\n            # Update task with message id\n            res2 = sql.execute(\n\"\"\"\n                    UPDATE Tasks\n                    SET \n                        msg_id = ?\n                    WHERE id = ?\n                \"\"\", \n                task.message.id, \n                task.message.nonce\n            )\n\n        # Remove from progressing rows\n        progressing_rows.pop(task.message.nonce, None)\n\n        # Print sql results as json (for debugging)\n        import json\n        str_res = json.dumps(res._asdict(), indent=2, default=str)\n        print(f\"&gt;&gt; SQL Result:\", str_res)\n\n        if res2 is not None:\n            str_res = json.dumps(res2._asdict(), indent=2, default=str)\n            print(f\"&gt;&gt; SQL Result 2:\", str_res)\n\n    except Exception as e:\n        print(f\"&gt;&gt; SQL Error:\", e)\n</code></pre></p>"}]}